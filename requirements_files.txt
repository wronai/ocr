# requirements.txt
# PDF OCR Processor - Python Dependencies

# Core dependencies
PyMuPDF>=1.23.0
Pillow>=10.0.0
requests>=2.31.0
pyyaml>=6.0.1
tqdm>=4.66.0

# Optional but recommended
numpy>=1.24.0
opencv-python>=4.8.0

# Development dependencies (install with: pip install -r requirements-dev.txt)
# pytest>=7.4.0
# black>=23.0.0
# flake8>=6.0.0
# mypy>=1.5.0
# pre-commit>=3.3.0

---

# requirements-dev.txt
# Development dependencies for PDF OCR Processor

# Testing
pytest>=7.4.0
pytest-cov>=4.1.0
pytest-mock>=3.11.0
pytest-xdist>=3.3.0

# Code formatting and linting
black>=23.0.0
isort>=5.12.0
flake8>=6.0.0
mypy>=1.5.0
pylint>=2.17.0

# Pre-commit hooks
pre-commit>=3.3.0

# Documentation
sphinx>=7.1.0
sphinx-rtd-theme>=1.3.0
myst-parser>=2.0.0

# Build tools
build>=0.10.0
twine>=4.0.0
wheel>=0.41.0

---

# setup.py
#!/usr/bin/env python3
"""
Setup script for PDF OCR Processor
"""

from setuptools import setup, find_packages
import os

# Read README for long description
def read_readme():
    with open("README.md", "r", encoding="utf-8") as fh:
        return fh.read()

# Read requirements
def read_requirements():
    with open("requirements.txt", "r", encoding="utf-8") as fh:
        return [line.strip() for line in fh if line.strip() and not line.startswith("#")]

# Get version from file
def get_version():
    version_file = os.path.join("pdf_processor", "__version__.py")
    if os.path.exists(version_file):
        with open(version_file, "r") as f:
            exec(f.read())
            return locals()["__version__"]
    return "2.0.0"

setup(
    name="pdf-ocr-processor",
    version=get_version(),
    author="PDF OCR Processor Team",
    author_email="team@pdf-ocr-processor.com",
    description="Advanced PDF OCR processing with AI-powered text extraction",
    long_description=read_readme(),
    long_description_content_type="text/markdown",
    url="https://github.com/your-repo/pdf-ocr-processor",
    packages=find_packages(),
    classifiers=[
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "Intended Audience :: End Users/Desktop",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Topic :: Scientific/Engineering :: Image Processing",
        "Topic :: Text Processing :: Markup",
        "Topic :: Utilities",
    ],
    python_requires=">=3.8",
    install_requires=read_requirements(),
    extras_require={
        "dev": [
            "pytest>=7.4.0",
            "black>=23.0.0",
            "flake8>=6.0.0",
            "mypy>=1.5.0",
        ],
        "gpu": [
            "torch>=2.0.0",
            "torchvision>=0.15.0",
        ],
        "web": [
            "fastapi>=0.100.0",
            "uvicorn>=0.23.0",
            "streamlit>=1.25.0",
        ],
    },
    entry_points={
        "console_scripts": [
            "pdf-ocr=pdf_processor.cli:main",
            "pdf-ocr-web=pdf_processor.web:main",
        ],
    },
    include_package_data=True,
    package_data={
        "pdf_processor": [
            "config/*.yaml",
            "templates/*.html",
            "static/*.css",
            "static/*.js",
        ],
    },
    project_urls={
        "Bug Reports": "https://github.com/your-repo/pdf-ocr-processor/issues",
        "Source": "https://github.com/your-repo/pdf-ocr-processor",
        "Documentation": "https://pdf-ocr-processor.readthedocs.io/",
    },
)

---

# docker-compose.yml
version: '3.8'

services:
  pdf-ocr-processor:
    build: .
    container_name: pdf-ocr-processor
    volumes:
      - ./documents:/app/documents
      - ./output:/app/output
      - ./config:/app/config
      - ./logs:/app/logs
    environment:
      - OLLAMA_HOST=ollama:11434
      - PDF_OCR_LOG_LEVEL=INFO
    depends_on:
      - ollama
    networks:
      - pdf-ocr-network

  ollama:
    image: ollama/ollama:latest
    container_name: ollama-server
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_MODELS=/root/.ollama/models
    networks:
      - pdf-ocr-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  web-ui:
    build: 
      context: .
      dockerfile: Dockerfile.web
    container_name: pdf-ocr-web
    ports:
      - "8501:8501"
    volumes:
      - ./documents:/app/documents
      - ./output:/app/output
    environment:
      - PDF_OCR_API_URL=http://pdf-ocr-processor:8000
    depends_on:
      - pdf-ocr-processor
    networks:
      - pdf-ocr-network

volumes:
  ollama_data:

networks:
  pdf-ocr-network:
    driver: bridge

---

# Dockerfile
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first (for better caching)
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p documents output logs config

# Set environment variables
ENV PYTHONPATH=/app
ENV PDF_OCR_LOG_LEVEL=INFO

# Expose port (if running web service)
EXPOSE 8000

# Default command
CMD ["python", "pdf_processor.py"]

---

# Dockerfile.web
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
RUN pip install streamlit fastapi uvicorn

# Copy web application
COPY web/ ./web/
COPY pdf_processor/ ./pdf_processor/

# Expose Streamlit port
EXPOSE 8501

# Run Streamlit app
CMD ["streamlit", "run", "web/app.py", "--server.port=8501", "--server.address=0.0.0.0"]

---

# Makefile
# PDF OCR Processor - Development Makefile

.PHONY: help install install-dev test lint format clean docker-build docker-run docs

# Default target
help:
	@echo "PDF OCR Processor - Available commands:"
	@echo ""
	@echo "  install      - Install production dependencies"
	@echo "  install-dev  - Install development dependencies"
	@echo "  test         - Run tests"
	@echo "  test-cov     - Run tests with coverage"
	@echo "  lint         - Run linting"
	@echo "  format       - Format code"
	@echo "  clean        - Clean build artifacts"
	@echo "  docker-build - Build Docker image"
	@echo "  docker-run   - Run with Docker Compose"
	@echo "  docs         - Build documentation"
	@echo "  release      - Create release"

# Installation
install:
	pip install -r requirements.txt

install-dev:
	pip install -r requirements-dev.txt
	pre-commit install

# Testing
test:
	python test_runner.py
	pytest tests/ -v

test-cov:
	pytest tests/ -v --cov=pdf_processor --cov-report=html --cov-report=term

# Code quality
lint:
	flake8 pdf_processor/ tests/
	mypy pdf_processor/
	pylint pdf_processor/

format:
	black pdf_processor/ tests/
	isort pdf_processor/ tests/

# Cleanup
clean:
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf build/ dist/ .coverage htmlcov/

# Docker
docker-build:
	docker build -t pdf-ocr-processor .

docker-run:
	docker-compose up -d

docker-stop:
	docker-compose down

# Documentation
docs:
	cd docs && make html

docs-serve:
	cd docs/_build/html && python -m http.server 8080

# Release
release: clean test lint
	python setup.py sdist bdist_wheel
	twine check dist/*

release-upload:
	twine upload dist/*

# Development
dev-setup: install-dev
	mkdir -p documents output logs config
	cp config/config.yaml.example config/config.yaml

dev-server:
	python -m pdf_processor.web

# Quick commands
run:
	python pdf_processor.py

verify:
	python test_runner.py --verify

models:
	ollama pull llava:7b
	ollama pull llama3.2-vision

---

# .env.example
# PDF OCR Processor - Environment Variables Example
# Copy to .env and modify as needed

# Ollama Configuration
OLLAMA_HOST=localhost:11434
OLLAMA_MODELS_PATH=/usr/share/ollama/.ollama/models

# PDF OCR Processor Configuration
PDF_OCR_MAX_WORKERS=4
PDF_OCR_TIMEOUT=300
PDF_OCR_MAX_IMAGE_SIZE=2048
PDF_OCR_DPI=200
PDF_OCR_LOG_LEVEL=INFO

# Paths
PDF_OCR_DOCUMENTS_FOLDER=documents
PDF_OCR_OUTPUT_FOLDER=output
PDF_OCR_CONFIG_FILE=config/config.yaml
PDF_OCR_LOG_FILE=logs/pdf_ocr.log

# Web UI Configuration (if using web interface)
PDF_OCR_WEB_HOST=0.0.0.0
PDF_OCR_WEB_PORT=8501
PDF_OCR_API_HOST=0.0.0.0
PDF_OCR_API_PORT=8000

# Development
PDF_OCR_DEBUG=false
PDF_OCR_PROFILE=false

---

# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        flake8 pdf_processor/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 pdf_processor/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        mypy pdf_processor/
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=pdf_processor --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t pdf-ocr-processor .
    
    - name: Test Docker image
      run: |
        docker run --rm pdf-ocr-processor python -c "import pdf_processor; print('Docker image OK')"
