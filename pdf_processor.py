#!/usr/bin/env python3
"""
PDF OCR Processor - G≈Ç√≥wny plik

Ten skrypt uruchamia g≈Ç√≥wnƒÖ funkcjonalno≈õƒá przetwarzania PDF z OCR.

Przyk≈Çady u≈ºycia:
  # Przetw√≥rz wszystkie PDF-y w domy≈õlnym folderze z domy≈õlnym modelem
  python pdf_processor.py

  # Wska≈º konkretny plik i model
  python pdf_processor.py --input dokument.pdf --model llava:7b

  # Przetw√≥rz ca≈Çy folder
  python pdf_processor.py --input folder_z_pdf --output wyniki

  # Poka≈º pomoc
  python pdf_processor.py --help
"""
import argparse
import sys

def parse_arguments():
    parser = argparse.ArgumentParser(description='Przetwarzanie dokument√≥w PDF z wykorzystaniem OCR')
    parser.add_argument('--input', type=str, help='≈öcie≈ºka do pliku PDF lub folderu z plikami PDF')
    parser.add_argument('--output', type=str, help='Folder wyj≈õciowy (domy≈õlnie: output)')
    parser.add_argument('--model', type=str, help='Nazwa modelu do u≈ºycia (np. llava:7b)')
    parser.add_argument('--workers', type=int, help='Liczba wƒÖtk√≥w roboczych')
    parser.add_argument('--verbose', action='store_true', help='Tryb szczeg√≥≈Çowy')
    return parser.parse_args()

def main():
    from pdf_processor import PDFOCRProcessor, main as processor_main
    
    print("üöÄ PDF OCR Processor v2.0")
    args = parse_arguments()
    
    # Konfiguracja na podstawie argument√≥w
    config = {}
    if args.input:
        config['input_path'] = args.input
    if args.output:
        config['output_folder'] = args.output
    if args.model:
        config['model'] = args.model
    if args.workers:
        config['workers'] = args.workers
    
    # Uruchom g≈Ç√≥wnƒÖ funkcjƒô z modu≈Çu
    try:
        processor_main(config=config)
    except KeyboardInterrupt:
        print("\nPrzerwano dzia≈Çanie przez u≈ºytkownika.")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå WystƒÖpi≈Ç b≈ÇƒÖd: {str(e)}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
